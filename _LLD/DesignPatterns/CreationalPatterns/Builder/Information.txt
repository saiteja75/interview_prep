Builder Pattern:
-> It is creational design pattern
-> provides a way to construct complex object step by step
-> The pattern allows you to produce different types and 
representations of an object using the same construction code.
-> The Builder pattern suggests that you extract the object construction code out 
of its own class and move it to separate objects called builders.
-> Each Builder Class can perform some specific construction
-> A Builder can have all the steps to construct the complex requirement (making house which involves many complex configurations)
-> Calling of builders setp by step to complete the requirement can be done by Director
-> Director should recieve a builder and directs will provide the specific instructions to builder class


When to use Builder Pattern:
-> Use the Builder pattern to get rid of a “telescoping constructor”. means final end product
changes if one configuration changes. product which we are building is similar but not same
-> Use the Builder pattern when you want your code to be able to create different 
representations of some product (for example, stone and wooden houses).
-> Use the Builder to construct Composite trees or other complex objects.
