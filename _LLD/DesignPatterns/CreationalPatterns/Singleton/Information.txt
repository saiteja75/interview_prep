Singleton Pattern:
-> It is creational pattern.
-> This pattern ensures that a class has only one instance, 
while providing a global access point to this instance.

Single Pattern solves below problem:
1. Ensures that class will only have one instance
2. provides global access point to the instance

Usecases:
-> Whenever there is a need of shared resource like database or file. Single instance
can be used across the application to update the shared resource and provide same
information to every one who needs the shared resource.

-> Whenever we need to open the database connection and close it

-> logger system

-> Cache Object

-> File System

-> Print Spooler

Solution:
All implementations of the Singleton have these two steps in common:
-> Make the default constructor private, to prevent other objects from using 
the new operator with the Singleton class.

-> Create a static creation method that acts as a constructor. Under the hood, 
this method calls the private constructor to create an object and saves it in 
a static field. All following calls to this method return the cached object.

Reference: https://blog.algomaster.io/p/singleton-design-pattern